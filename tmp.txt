我已经基本完成了 Qt 客户端中私聊功能的开发，目前程序能够正常运行，私聊通信流畅。但 UI 还有一些尚待完善的小问题，主要集中在样式应用和布局交互方面。我希望你在不更改功能逻辑、不更动任何接口的前提下，协助我优化以下几点：

🔧 任务一：PrivateChatTab 和 PrivateChatSession 样式未生效

这两个组件未正确应用 QSS 样式表。经排查，是由于它们没有设置与 QSS 匹配的对象名称（objectName），导致样式选择器无法生效。

请帮助我修改相应组件的对象名称设置逻辑，或调整 QSS 中的选择器写法，使得样式可以正确匹配并生效。

注意不要影响已有的 QSS 样式定义，仅对当前两个类进行样式修复。

注意qss样式的语法问题,参考原有qss文件,仅仅使用简单的css2语法,不要嵌套

🔧 任务二：用户列表（用户选择区域）的 UI 交互逻辑较为生硬

当前用户列表点击、选择等交互逻辑不够流畅，UI 体验略显僵硬。

请优化该区域的交互行为，使其更自然。

此外，该区域在用户数较多时未启用滚动条，导致列表溢出。

请添加滚动条并确保其与当前 QSS 样式兼容并正确加载。

保证现有样式在用户列表中能正确渲染，避免样式被遮挡或未应用。

🔧 任务三：会话列表标签（tab）布局优化

当前会话列表标签位于左上角，显示逻辑不合理，建议将其移动到界面左侧，以侧边栏（sidebar）的形式呈现。

该区域当前显示的是用户的 username，应当显示对应的 nickname。

同样，该区域在会话较多时也应具备滚动条支持。

需要加载成功并应用 QSS 样式，且不影响其他部分样式逻辑。

📝 要求总结：

请修改布局代码，使 sidebar 显示在左侧，并为其添加滚动区域；

请设置所有相关组件的 objectName，并确保 QSS 选择器能正确匹配；

不要修改接口、业务逻辑及功能实现，只做 UI 层和样式层相关优化；

不要改动项目中已有的 QSS 样式定义，只做必要的样式补充和对象命名调整；

保证修改后项目依然能够流畅运行。

以下是相关的cpp代码和qss:
#include "PrivateChatTab.h"
#include <QDateTime>
#include <QHBoxLayout>
#include <QLabel>
#include <QMessageBox>
#include <QScrollBar>
#include <QtConcurrent/QtConcurrent>
#include <QDebug.h>

PrivateChatTab::PrivateChatTab(ChatClient* client, const QString& username, const QString& nickname,
                               QWidget* parent)
    : QWidget(parent), chatClient(client), curUsername(username), curNickname(nickname)
{
    setupUi();
    connectSignals();
}

void PrivateChatTab::setupUi()
{
    QVBoxLayout* privateTabLayout = new QVBoxLayout(this);
    privateTabLayout->setContentsMargins(8, 8, 8, 8);
    privateTabLayout->setSpacing(10);

    QSplitter* privateSplitter = new QSplitter(Qt::Horizontal);
    privateSplitter->setObjectName("privateSplitter");

    QWidget* chatWidget = new QWidget();
    QVBoxLayout* privateChatLayout = new QVBoxLayout(chatWidget);
    privateChatLayout->setContentsMargins(0, 0, 0, 0);
    chatSessions = new QTabWidget();
    chatSessions->setObjectName("chatSessions");
    chatSessions->setTabsClosable(false);
    privateChatLayout->addWidget(chatSessions);

    QWidget* usersWidget = new QWidget();
    QVBoxLayout* usersLayout = new QVBoxLayout(usersWidget);
    usersLayout->setContentsMargins(0, 0, 0, 0);

    // 在线
    QLabel* usersLabel = new QLabel("在线用户");
    usersLabel->setObjectName("usersLabel");
    onlineUsersList = new QListWidget();
    onlineUsersList->setObjectName("onlineUsersList");
    onlineUsersList->setMaximumWidth(200);
    usersLayout->addWidget(usersLabel);
    usersLayout->addWidget(onlineUsersList);

    // 离线
    QLabel* offlineUsersLabel = new QLabel("离线用户");
    offlineUsersLabel->setObjectName("offlineUsersLabel");
    offlineUsersList = new QListWidget();
    offlineUsersList->setObjectName("offlineUsersList");
    offlineUsersList->setMaximumWidth(200);
    usersLayout->addWidget(offlineUsersLabel);
    usersLayout->addWidget(offlineUsersList);

    privateSplitter->addWidget(chatWidget);
    privateSplitter->addWidget(usersWidget);
    privateSplitter->setSizes({800, 200});
    privateTabLayout->addWidget(privateSplitter);
}

void PrivateChatTab::connectSignals()
{
    // 点击就创建或者切换到目标会话
    connect(onlineUsersList, &QListWidget::itemClicked, this, &PrivateChatTab::handleUserSelected);
    connect(offlineUsersList, &QListWidget::itemClicked, this, &PrivateChatTab::handleUserSelected);
}

void PrivateChatTab::handleUserSelected(QListWidgetItem* item)
{
    if (!item) return;
    QString targetUser = item->data(Qt::UserRole).toString();
    qDebug() << "选中 user: " << targetUser;
    PrivateChatSession* session = getOrCreateSession(targetUser);
    // 此处只需要一个参数
    chatSessions->setCurrentWidget(session);
}

PrivateChatSession* PrivateChatTab::getOrCreateSession(const QString& targetUser)
{
    if (sessions.contains(targetUser))
    {
        return sessions[targetUser];
    }
    // QString targetUsername = allUsers[targetUser]["username"].toString();
    // targetUser已经表示username了
    QString targetNickname = allUsers[targetUser]["nickname"].toString();

    PrivateChatSession* session = new PrivateChatSession(chatClient, curUsername, curNickname,
                                                         targetUser, targetNickname, this);
    sessions[targetUser] = session;
    int index = chatSessions->addTab(session, targetUser);
    chatSessions->setTabToolTip(index, QString("Chat with %1").arg(targetUser));

    // Connect session signals to ChatClient
    connect(session, &PrivateChatSession::sendMessageRequested, this,
            [=](const QString& target, const QString& content)
            { chatClient->sendPrivateMessage(target, content); });

    connect(session, &PrivateChatSession::sendFileRequested, this,
            [=](const QString& target, const QByteArray& content)
            { chatClient->sendFile(target, content); });
    // qDebug() << "发送对象user: " << targetUser;

    return session;
}

PrivateChatSession* PrivateChatTab::getOrCreateSessionTwo(const QString& sender,
                                                          const QString& receiver)
{
    QString targetUser;
    if (sender == curUsername)
        targetUser = receiver;
    else
        targetUser = sender;
    return getOrCreateSession(targetUser);
}

void PrivateChatTab::appendMessage(const QString& sender, const QString& receiver,
                                   const QString& content, const QString& timestamp)
{  // sender表示username而不是nickname!!!
    qDebug() << "sender: " << sender << "receiver: " << receiver << " content: " << content;
    PrivateChatSession* session = getOrCreateSessionTwo(sender, receiver);
    session->appendMessage(sender, receiver, content, timestamp);
    // 这里也需要修改receiver
}

void PrivateChatTab::handleFileReceived(const QString& sender, const QString& receiver,
                                        const QByteArray& fileContent, const QString& timestamp)
{
    PrivateChatSession* session = getOrCreateSessionTwo(sender, receiver);
    session->handleFileReceived(sender, receiver, fileContent, timestamp);
}

// 把涉及onlinelist, offlinelist的逻辑全部提取出来, 单独处理
void PrivateChatTab::addToOnlineList(const QJsonObject& userObj)
{
    QString username = userObj["username"].toString();
    QString nickname = userObj["nickname"].toString();
    QString displayText = QString("%1 (%2)").arg(nickname).arg(username);
    QListWidgetItem* item = new QListWidgetItem(displayText);
    item->setData(Qt::UserRole, username);
    qDebug() << "add online users: " << item << " data: " << item->data(Qt::UserRole).toString();
    onlineUsersList->addItem(item);
}

void PrivateChatTab::removeFromOnlineList(const QJsonObject& userObj)
{
    if (!userObj.contains("username"))
    {
        qDebug() << "removeFromOnlineList: Missing username in userObj";
        return;
    }

    QString username = userObj["username"].toString();
    for (int i = 0; i < onlineUsersList->count(); ++i)
    {
        QListWidgetItem* item = onlineUsersList->item(i);
        if (item->data(Qt::UserRole).toString() == username)
        {
            qDebug() << "Removing from online users: " << username;
            delete onlineUsersList->takeItem(i);
            break;
        }
    }
}

void PrivateChatTab::addToOfflineList(const QJsonObject& userObj)
{
    QString username = userObj["username"].toString();
    QString nickname = userObj["nickname"].toString();
    QString displayText = QString("%1 (%2)").arg(nickname).arg(username);
    QListWidgetItem* item = new QListWidgetItem(displayText);
    item->setData(Qt::UserRole, username);
    qDebug() << "add offline users: " << item << " data: " << item->data(Qt::UserRole).toString();
    offlineUsersList->addItem(item);
}

void PrivateChatTab::removeFromOfflineList(const QJsonObject& userObj)
{
    if (!userObj.contains("username"))
    {
        qDebug() << "removeFromOfflineList: Missing username in userObj";
        return;
    }

    QString username = userObj["username"].toString();
    for (int i = 0; i < offlineUsersList->count(); ++i)
    {
        QListWidgetItem* item = offlineUsersList->item(i);
        if (item->data(Qt::UserRole).toString() == username)
        {
            qDebug() << "Removing from offline users: " << username;
            delete offlineUsersList->takeItem(i);
            break;
        }
    }
}

void PrivateChatTab::initOnlineUsers(const QJsonArray& users)  // 初始化在线用户列表
{
    onlineUsersList->clear();
    for (const QJsonValue& user : users)
    {
        QJsonObject userObj = user.toObject();
        addToOnlineList(userObj);
        userObj["isOnline"] = true;
        allUsers[userObj["username"].toString()] = userObj;
        onlineNumbers++;
    }
}

void PrivateChatTab::initOfflineUsers(const QJsonArray& users)  // 初始化离线用户列表
{
    offlineUsersList->clear();
    for (const QJsonValue& user : users)
    {
        QJsonObject userObj = user.toObject();
        addToOfflineList(userObj);
        userObj["isOnline"] = false;
        allUsers[userObj["username"].toString()] = userObj;
        offlineNumbers++;
    }
}
// 发现一个重大问题: 发送user类比只发送username更合适,因为username无法存储
// 已经解决, 0表示登录
void PrivateChatTab::someoneChange(int status, const QJsonObject& cur_user)
{
    if (status == 0)  // 上线
    {
        QString cur_username = cur_user["username"].toString();
        if (allUsers.contains(cur_username))
        {
            if (!allUsers[cur_username]["isOnline"].toBool())  // 取出都要写好多
            {
                allUsers[cur_username]["isOnline"] = true;
                onlineNumbers++;
                offlineNumbers--;
                qDebug() << cur_username << " 上线";
                addToOnlineList(cur_user);
                removeFromOfflineList(cur_user);
            }
            else
            {
                qDebug() << cur_username << " 重复登录";
            }
        }
        else
        {
            allUsers[cur_username] = cur_user;
            allUsers[cur_username]["isOnline"] = true;
            onlineNumbers++;
            qDebug() << cur_username << " 新增在线";
            addToOnlineList(cur_user);
        }
    }
    else  // 下线
    {
        QString cur_username = cur_user["username"].toString();
        if (allUsers.contains(cur_username))
        {
            if (allUsers[cur_username]["isOnline"].toBool())  // 当前在线
            {
                allUsers[cur_username]["isOnline"] = false;
                onlineNumbers--;
                offlineNumbers++;
                addToOfflineList(cur_user);
                removeFromOnlineList(cur_user);
            }
            else
            {
                qDebug() << cur_username << " 重复登出";
            }
        }
        else
        {
            allUsers[cur_username] = cur_user;
            allUsers[cur_username]["isOnline"] = false;
            offlineNumbers++;
            qDebug() << cur_username << " 新增离线";
            addToOfflineList(cur_user);
        }
    }
}

int PrivateChatTab::getOnlineNumber()
{
    return onlineNumbers;
}
int PrivateChatTab::getOfflineNumber()
{
    return offlineNumbers;
}


#include "PrivateChatSession.h"
#include <QDateTime>
#include <QHBoxLayout>
#include <QMessageBox>
#include <QScrollBar>
#include <QtConcurrent/QtConcurrent>

PrivateChatSession::PrivateChatSession(ChatClient* client, const QString& curUsername_,
                                       const QString& curNickname_, const QString& targetUsername_,
                                       const QString& targetNickname_, QWidget* parent)
    : QWidget(parent),
      chatClient(client),
      curUsername(curUsername_),
      curNickname(curNickname_),
      targetUsername(targetUsername_),
      targetNickname(targetNickname_)
{
    setupUi();
    connectSignals();
}

void PrivateChatSession::setupUi()
{
    QVBoxLayout* layout = new QVBoxLayout(this);
    layout->setContentsMargins(8, 8, 8, 8);
    layout->setSpacing(10);

    privateChatDisplay = new QScrollArea();
    privateChatDisplay->setObjectName("privateChatDisplay_" + targetUsername);
    privateChatDisplay->setMinimumHeight(400);
    privateChatDisplay->setMinimumWidth(600);
    privateChatContainer = new QWidget();
    privateChatContainer->setObjectName("privateChatContainer_" + targetUsername);
    QVBoxLayout* messagesLayout = new QVBoxLayout(privateChatContainer);
    messagesLayout->setAlignment(Qt::AlignTop);
    messagesLayout->setContentsMargins(0, 0, 0, 0);
    privateChatDisplay->setWidget(privateChatContainer);
    privateChatDisplay->setWidgetResizable(true);

    QHBoxLayout* inputLayout = new QHBoxLayout();
    privateMessageInput = new QLineEdit();
    privateMessageInput->setObjectName("privateMessageInput_" + targetUsername);
    privateMessageInput->setPlaceholderText("输入私聊消息...");
    privateSendButton = new QPushButton("发送");
    privateSendButton->setObjectName("privateSendButton_" + targetUsername);
    sendFileButton = new QPushButton("文件");
    sendFileButton->setObjectName("sendFileButton_" + targetUsername);
    inputLayout->addWidget(privateMessageInput);
    inputLayout->addWidget(privateSendButton);
    inputLayout->addWidget(sendFileButton);

    layout->addWidget(privateChatDisplay);
    layout->addLayout(inputLayout);
}

void PrivateChatSession::connectSignals()
{
    connect(privateSendButton, &QPushButton::clicked, this,
            &PrivateChatSession::sendPrivateMessage);
    connect(privateMessageInput, &QLineEdit::returnPressed, this,
            &PrivateChatSession::sendPrivateMessage);
    connect(sendFileButton, &QPushButton::clicked, this, &PrivateChatSession::sendFile);
}

void PrivateChatSession::sendPrivateMessage()
{
    QString content = privateMessageInput->text().trimmed();
    if (content.isEmpty()) return;
    if (content.toUtf8().size() > 1000)
    {
        QMessageBox::warning(this, "错误", "消息内容不能超过1000字节");
        return;
    }
    qDebug() << "Sending message to: " << targetUsername << ": " << content;
    emit sendMessageRequested(targetUsername, content);
    QString timestamp = QDateTime::currentDateTime().toString("hh:mm:ss");
    appendMessage(curUsername, targetUsername, content, timestamp);
    privateMessageInput->clear();
}

void PrivateChatSession::sendFile()
{
    QString filePath = QFileDialog::getOpenFileName(this, "选择文件");
    if (filePath.isEmpty()) return;
    QFile file(filePath);
    if (!file.open(QIODevice::ReadOnly))
    {
        QMessageBox::warning(this, "错误", "无法打开文件");
        return;
    }
    qint64 size = file.size();
    if (size > 10 * 1024 * 1024)
    {
        QMessageBox::warning(this, "错误", "文件不能超过10MB");
        file.close();
        return;
    }
    QByteArray fileContent = file.readAll();
    emit sendFileRequested(targetUsername, fileContent);
    QString timestamp = QDateTime::currentDateTime().toString("hh:mm:ss");
    appendMessage(curUsername, targetUsername, "[发送文件] " + QFileInfo(filePath).fileName(),
                  timestamp);
    file.close();
}

void PrivateChatSession::appendMessage(const QString& sender, const QString& receiver,
                                       const QString& content, const QString& timestamp)
{
    QVBoxLayout* layout = qobject_cast<QVBoxLayout*>(privateChatContainer->layout());
    if (!layout)
    {
        qDebug() << "PrivateChatSession: Invalid container layout for" << targetUsername;
        return;
    }

    if (layout->count() > 0)
    {
        QLayoutItem* item = layout->itemAt(layout->count() - 1);
        if (item->spacerItem())
        {
            layout->removeItem(item);
            delete item;
        }
    }

    // 转换为显示用的 nickname
    QString displaySender = sender;
    if (sender == curUsername)
        displaySender = curNickname;
    else if (sender == targetUsername)
        displaySender = targetNickname;

    qDebug() << "Appending message: sender=" << sender << ", displaySender=" << displaySender
             << ", content=" << content;

    MessageBubble* bubble = new MessageBubble("", displaySender, content, timestamp,
                                              sender == curUsername, privateChatContainer);
    layout->addWidget(bubble);
    layout->addStretch();

    bool isAtBottom = privateChatDisplay->verticalScrollBar()->value() >=
                      privateChatDisplay->verticalScrollBar()->maximum() - 20;
    privateChatDisplay->viewport()->update();
    if (isAtBottom)
    {
        QTimer::singleShot(10, privateChatDisplay,
                           [=]()
                           {
                               privateChatDisplay->verticalScrollBar()->setValue(
                                   privateChatDisplay->verticalScrollBar()->maximum());
                           });
    }
}

void PrivateChatSession::handleFileReceived(const QString& sender, const QString& receiver,
                                            const QByteArray& fileContent, const QString& timestamp)
{
    QString saveFilePath = QFileDialog::getSaveFileName(this, "保存文件");
    if (saveFilePath.isEmpty()) return;
    QFuture<void> future = QtConcurrent::run(
        [=]()
        {
            QFile file(saveFilePath);
            if (file.open(QIODevice::WriteOnly))
            {
                file.write(fileContent);
                file.close();
                QMetaObject::invokeMethod(
                    this,
                    [=]()
                    {
                        appendMessage(sender, receiver,
                                      "[接收文件] " + QFileInfo(saveFilePath).fileName(),
                                      timestamp);
                    });
            }
            else
            {
                qDebug() << "Failed to save file:" << saveFilePath;
            }
        });
    Q_UNUSED(future);
}
/* Global Styles */
* {
    font-family: "Segoe UI", "Microsoft YaHei", "Noto Sans", sans-serif;
    font-size: 14px;
}

/* Login and Register Windows */
#LoginWindow, #RegisterWindow {
    background: transparent;
}

QWidget#centralWidget {
    background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFD1E1, stop:1 #E1D1FF);
    border-radius: 12px;
    padding: 20px;
}

/* Input Fields */
#usernameEdit, #passwordEdit, #nicknameEdit {
    padding: 12px;
    border: 2px solid #FFE4EC;
    border-radius: 8px;
    background-color: #FFFFFF;
    font-size: 14px;
    margin: 8px 0;
}

#usernameEdit:focus, #passwordEdit:focus, #nicknameEdit:focus {
    border-color: #F06292;
    background-color: #FFF5F8;
    outline: none;
}

/* Buttons */
#loginButton, #registerButton, #backToLoginButton {
    padding: 12px 30px;
    font-size: 14px;
    font-weight: 600;
    border-radius: 8px;
    background: #5782df;
    color: #FFFFFF;
    border: none;
    min-width: 120px;
}

#loginButton:hover, #registerButton:hover, #backToLoginButton:hover {
    background: #B196FF;
}

/* Status Label */
#statusLabel {
    color: #7B61FF;
    font-size: 13px;
    padding: 8px;
}

/* Chat Window */
#ChatWindow {
    background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFF5F8, stop:1 #F5F0FF);
}

/* Tab Widget */
QTabWidget {
    background: #FFFFFF;
    border-radius: 10px;
}

#chatTabs::pane {
    border: 1px solid #FFE4EC;
    background-color: #FFFFFF;
    border-radius: 10px;
}

QTabBar::tab {
    background: #FFE4EC;
    padding: 14px 30px;
    border: 1px solid #FFB1C8;
    border-bottom: none;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    margin-right: 6px;
    font-size: 14px;
    color: #7B61FF;
}

QTabBar::tab:selected {
    background: #FFFFFF;
    color: #F06292;
    font-weight: bold;
    border-bottom: 3px solid #F06292;
}

QTabBar::tab:hover {
    background: #FFF0F5;
}

/* Chat Containers */
#publicChatContainer, #privateChatContainer, #groupChatContainer {
    background: #FFFFFF;
    border-radius: 12px;
    padding: 10px;
}

/* Scroll Areas */
#publicChatDisplay, #privateChatDisplay, #groupChatDisplay {
    border: none;
    background: transparent;
    margin: 0;
}

QScrollArea {
    border: none;
    background-color: transparent;
}

QScrollArea > QWidget > QWidget {
    background-color: transparent;
}

/* Input Fields */
#publicMessageInput, #privateMessageInput, #groupMessageInput {
    padding: 12px;
    border: 1px solid #FFE4EC;
    border-radius: 8px;
    background: #FFF5F8;
    font-size: 14px;
}

#publicMessageInput:focus, #privateMessageInput:focus, #groupMessageInput:focus {
    border-color: #F06292;
}

/* Buttons */
#publicSendButton, #privateSendButton, #groupSendButton, #sendFileButton {
    padding: 12px 20px;
    border-radius: 8px;
    background: #5782df;
    color: #FFFFFF;
    font-weight: 600;
    border: none;
    min-width: 80px;
}

#publicSendButton:hover, #privateSendButton:hover, #groupSendButton:hover, #sendFileButton:hover {
    background: #B196FF;
}

/* Splitter */
#privateSplitter {
    background: #FFF5F8;
}

QSplitter::handle:horizontal {
    width: 6px;
    background: #FFB1C8;
}

/* Online Users List */
#onlineUsersList {
    border: 1px solid #FFE4EC;
    border-radius: 10px;
    background: #FFFFFF;
    padding: 10px;
}

#onlineUsersList::item {
    padding: 12px;
    border-radius: 6px;
    margin: 6px;
}

#onlineUsersList::item:selected {
    background: #F06292;
    color: #FFFFFF;
}

#onlineUsersList::item:hover {
    background: #FFF0F5;
}

/* Group Combo */
#groupCombo {
    padding: 12px;
    border: 1px solid #FFE4EC;
    border-radius: 8px;
    background: #FFF5F8;
    font-size: 14px;
}

#groupCombo:focus {
    border-color: #F06292;
}

/* Status Bar */
QStatusBar {
    background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #FFB1C8, stop:1 #C8B1FF);
    border-top: 1px solid #FFE4EC;
    padding: 10px;
}

#statusLabel, #onlineCountLabel {
    color: #7B61FF;
    font-weight: 600;
    padding: 6px 15px;
}

#logoutButton {
    background: #FF6F91;
    color: #FFFFFF;
    border-radius: 8px;
    padding: 10px 20px;
    font-weight: 600;
}

#logoutButton:hover {
    background: #FF4A7D;
}

/* Scrollbar */
QScrollBar:vertical {
    border: none;
    background: #FFF5F8;
    width: 8px;
    margin: 0;
}

QScrollBar::handle:vertical {
    background: #FFB1C8;
    border-radius: 4px;
    min-height: 40px;
}

QScrollBar::handle:vertical:hover {
    background: #F06292;
}

QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
    background: transparent;
}

QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
    height: 0px;
}

/* Horizontal scrollbar - hide it */
QScrollBar:horizontal {
    height: 0px;
    background: transparent;
}

/* Users Label */
#usersLabel {
    font-weight: 600;
    color: #7B61FF;
    padding: 10px;
}

/* Message Bubble */
#MessageBubble {
    margin: 6px 8px;
    min-width: 100px;
}

/* Avatar */
#avatarLabel {
    min-width: 40px;
    min-height: 40px;
    max-width: 40px;
    max-height: 40px;
}

/* Nickname */
#nicknameLabel {
    font-weight: 600;
    color: #7B61FF;
    padding: 2px 8px;
    margin: 0;
}

#nicknameLabel[own="true"] {
    text-align: right;
    color: #F06292;
}

/* Timestamp */
#timeLabel {
    color: #9C80FF;
    font-size: 11px;
    padding: 2px 8px;
    margin: 0;
}

#timeLabel[own="true"] {
    text-align: right;
}

/* Content */
#contentLabel {
    padding: 10px 12px;
    margin: 4px 8px;
    border-radius: 18px;
    white-space: pre-wrap;
    line-height: 1.5;
}

#contentLabel[own="true"] {
    background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #F06292, stop:1 #FF8AB1);
    color: #FFFFFF;
    border-top-right-radius: 4px;
}

#contentLabel[own="false"] {
    background: #E6E1FF;
    color: #7B61FF;
    border-top-left-radius: 4px;
}

#contentLabel:hover {
    opacity: 0.95;
}